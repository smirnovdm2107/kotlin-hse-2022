/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package homework03.reddit

import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.databind.DeserializationContext
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.deser.std.StdDeserializer
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.module.kotlin.registerKotlinModule
import homework03.model.*
import homework03.util.URLMapper
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.net.URL
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.util.*

class RedditHandlerImpl : RedditHandler {
    private lateinit var client: HttpClient
    init {
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
        val module = SimpleModule()
        module.addDeserializer(CommentDataDTO::class.java, CommentDataDTODeserializer())
        objectMapper.registerModule(module)
    }
    override suspend fun getComments(title: String): CommentsSnapshot {
            val node = objectMapper.readTree(getContent(title))
            val topicId = node
                .path(0)
                .path("data")
                .get("children")
                .path(0)
                .path("data")
                .get("id")
                .asText()
        try {
            return CommentsSnapshot(
            node.map {
                objectMapper
                    .treeToValue(it, RedditDataDTO::class.java)
                    .toCommentsDTO(topicId)
            }.flatten())

        } catch (e : Exception) {
            println(node.toPrettyString())
            throw e
        }
    }

    class CommentDataDTODeserializer(vc: Class<*>?) : StdDeserializer<CommentDataDTO>(vc) {

        constructor() : this(null)
        override fun deserialize(p: JsonParser?, ctxt: DeserializationContext?): CommentDataDTO {
            if (p == null) {
                throw IllegalArgumentException()
            }
            val node : JsonNode = p.codec.readTree(p)
            if (node["kind"].asText() == "t1") {
                return CommentDataDTO(objectMapper.treeToValue(node["data"], RawCommentT1DTO::class.java))
            }
            return CommentDataDTO(objectMapper.treeToValue(node["data"], RawCommentT3DTO::class.java))
        }
    }
    override suspend fun getTopic(title: String): TopicSnapshot = TopicSnapshot(
        getSubredditAbout(title),
        getTopicInfo(title),
        Date()
    )

    private suspend fun getSubredditAbout(name: String) : TopicAboutDTO {
        val url = urlMapper.mapToAboutUrl(name)
        return objectMapper.treeToValue(
            getJsonTree(url).path("data"), TopicAboutDTO::class.java)
    }

    private suspend fun getTopicInfo(name: String) : List<TopicInfoDTO> {
        return getRawTopicInfo(name).map {it.toTopicInfoDTO()}
    }

    private suspend fun getRawTopicInfo(name : String) : List<RawTopicInfoDTO> {
        val url = urlMapper.mapToTopicUrl(name)
        val content = getContent(url)
        try {
            return objectMapper.readValue(content, RedditTopicPageDTO::class.java)
                .redditTopicListDTO
                .redditTopicDataDTOs
                .map { it.rawTopicInfoDTO }

        } catch (e : Exception) {
            println(content)
            throw e
        }
    }

    private suspend fun getJsonTree(url: String) : JsonNode = objectMapper.readTree(getContent(url))

    private suspend fun getContent(url: String) : String {
        return withContext(Dispatchers.IO) {
            if (!::client.isInitialized) {
                client = HttpClient.newBuilder().build()
            }
            client.send(
                HttpRequest.newBuilder()
                    .GET()
                    .uri(URL(url).toURI())
                    .header("User-Agent", "homework3.redditHandler")
                    .build(),
                HttpResponse.BodyHandlers.ofString()
            )
        }.body().replace("\"replies\": \"\"", "\"replies\": null")
    }


    override suspend fun getTopicWithComments(title: String): TopicWithCommentsSnapshots {
        val rawTopics = getRawTopicInfo(title)
        val comments = rawTopics
            .map {it.permalink
                .run { urlMapper.mapPermalinkToCommentLink(this)}
                .run {
                    getComments(this)} }
        val topics = rawTopics.map {it.toTopicInfoDTO()}.run {
            TopicSnapshot(getSubredditAbout(title), this)
        }
        return TopicWithCommentsSnapshots(topics, comments)
    }

    companion object {
        private val objectMapper = ObjectMapper().registerKotlinModule()
        private val urlMapper = URLMapper()
    }
}

fun CommentDTO.flatten(list: MutableList<ListComment>) : List<ListComment> {
    list.add(this.toListComment())
    this.replies.forEach { it.flatten(list) }
    return list
}
fun CommentDTO.flatten() : List<ListComment> = this.flatten(ArrayList())



