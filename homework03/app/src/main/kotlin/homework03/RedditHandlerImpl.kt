/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package homework03

import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.registerKotlinModule
import homework03.csv.csvSerialize
import homework03.model.*
import kotlinx.coroutines.*
import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.FileReader
import java.io.FileWriter
import java.net.URL
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.util.*

class RedditHandlerImpl : RedditHandler {
    init {
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
    }
    override suspend fun getComments(title: String): CommentsSnapshot {
        val url = urlMapper.mapToJsonURL(title)
        val node = objectMapper.readTree(getContent(url))
        val topicId = node
            .path(0)
            .path("data")
            .get("children")
            .path(0)
            .path("data")
            .get("id")
            .asText()
        return CommentsSnapshot(
            node.map{
                    getComments(it,
                        topicId)}
                .flatten(),
            Date()
        )
    }

    private fun getComments(node : JsonNode, topicId: String) : List<CommentDTO> {
            val data = node
                .path("data")
                .path("children")
                .path(0)
                .get("data")

            val children = data.get("replies")
            return node.map{CommentDTO(
                data.get("created").asLong(),
                data.get("ups").asInt(),
                data.get("downs").asInt(),
                data.get("body")?.asText(),
                data.get("author_fullname").asText(),
                if (children != null && !children.isEmpty)
                    getComments(children, topicId)
                else
                    emptyList(),
                data.get("id").asText(),
                topicId
            )}
    }


    override suspend fun getTopic(name: String): TopicSnapshot {
        return TopicSnapshot(
            getSubredditAbout(name),
            getTopicInfo(name),
            Date()
        )
    }

    private suspend fun getSubredditAbout(name: String) : TopicAboutDTO {
        val url = urlMapper.mapToAboutJsonUrl(name)
        return objectMapper.treeToValue(
            getJsonTree(url).path("data"), TopicAboutDTO::class.java)
    }

    private suspend fun getTopicInfo(name: String) : List<TopicInfoDTO> {
        val url = urlMapper.mapToJsonURL(name)
        println(url)
        return getJsonTree(url)
            .path("data")
            .path("children")
            .map {
                objectMapper.treeToValue(it.path("data"),
                    TopicInfoDTO::class.java)
            }
    }

    private suspend fun getJsonTree(url: URL) : JsonNode {
        val content = getContent(url)
        return objectMapper.readTree(content)
    }
    private suspend fun getContent(url: URL) : String {
        val request  = HttpRequest.newBuilder()
            .GET()
            .uri(url.toURI())
            .header("User-Agent", "homework03.RedditHandler/app")
            .build()
        return withContext(Dispatchers.IO) {
            HttpClient.newBuilder().build().send(request, HttpResponse.BodyHandlers.ofString())
        }.body()
    }
    companion object {
        private val objectMapper = ObjectMapper().registerKotlinModule()
        private val urlMapper = URLMapper()
    }
}

private fun List<CommentDTO>.flatten(list: MutableList<CommentDTO>) : List<CommentDTO> {
    if (this.isEmpty())
        return list
    this.map {
        list.add(it)
        it.children.flatten(list)
    }
    return list
}
private fun List<CommentDTO>.flatten() : List<CommentDTO> = this.flatten(ArrayList())

suspend fun <T, R> Iterable<T>.mapParallel(transform: (T) -> R): List<R> = coroutineScope {
    map { async { transform(it) } }.map { it.await() }
}
fun main() = runBlocking<Unit> {
    launch {
        val redditHandler = RedditHandlerImpl()
        withContext(Dispatchers.IO) {
            BufferedReader(
                FileReader("topic_input.txt")
            )
        }
            .lines()
            .toList()
            .map {
            async {  redditHandler.getTopic(it) } }.awaitAll().map{ it.infos}
            .forEach {
                val out = BufferedWriter(FileWriter("topics.csv"))
                out.write(csvSerialize(it, TopicInfoDTO::class))
                out.flush()
            }
        withContext(Dispatchers.IO) {
            BufferedReader(
                FileReader("comment_input.txt")
            )
        }
            .lines()
            .toList()
            .map {
                async {  redditHandler.getComments(it) } }.awaitAll().map{it.comments }
            .forEach {
                val out = BufferedWriter(FileWriter("comments.csv"))
                out.write(
                    csvSerialize(
                    it.flatten(), CommentDTO::class))
                out.flush()
            }

    }
}

