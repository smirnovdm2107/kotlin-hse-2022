/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package homework03

import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.readValue
import com.fasterxml.jackson.module.kotlin.registerKotlinModule
import homework03.model.*
import kotlinx.coroutines.*
import java.net.URL
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.time.LocalDate
import java.util.*
import kotlin.concurrent.timer
import kotlin.time.Duration.Companion.microseconds

class RedditHandlerImpl {
    init {
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
    }
    val greeting: String
        get() {
            return "Hello World!"
        }
    suspend fun getComments(title: String): CommentsSnapshot {
        val url = urlMapper.mapToJsonURL(title)
        return CommentsSnapshot(
            getComments(objectMapper.readTree(getContent(url))
                .path(0)
                .get("data")
                .get("children")),
            Date()
        )

    }

    suspend fun getComments(node : JsonNode) : List<CommentDTO> {
        return node.map {
            val data = it.path("data")
            val children = data.get("children")
            CommentDTO(
                data.get("created").asLong(),
                data.get("ups").asInt(),
                data.get("downs").asInt(),
                data.get("selftext").asText(),
                data.get("author_fullname").asText(),
                if (children == null) emptyList() else getComments(children)
            )
        }
    }


    suspend fun getTopic(name: String): TopicSnapshot {
        return TopicSnapshot(
            getSubredditAbout(name),
            getTopicInfo(name),
            Date()
        )
    }

    private suspend fun getSubredditAbout(name: String) : TopicAboutDTO {
        val url = urlMapper.mapToAboutJsonUrl(name)
        return objectMapper.treeToValue(
            getJsonTree(url).path("data"), TopicAboutDTO::class.java)
    }

    private suspend fun getTopicInfo(name: String) : List<TopicInfoDTO> {
        val url = urlMapper.mapToJsonURL(name)
        println(url)
        return getJsonTree(url)
            .path("data")
            .path("children")
            .map { it ->
                objectMapper.treeToValue(it.path("data"),
                    TopicInfoDTO::class.java)
            }
    }

    private suspend fun getJsonTree(url: URL) : JsonNode {
        val content = getContent(url)
        return objectMapper.readTree(content)
    }
    private suspend fun getContent(url: URL) : String {
        val request  = HttpRequest.newBuilder()
            .GET()
            .uri(url.toURI())
            .header("User-Agent", "homework03.RedditHandler/app")
            .build()
        return withContext(Dispatchers.IO) {
            HttpClient.newBuilder().build().send(request, HttpResponse.BodyHandlers.ofString())
        }.body()
    }
    companion object {
        private val objectMapper = ObjectMapper().registerKotlinModule()
        private val urlMapper = URLMapper()
        private val topicInfoListType
        = objectMapper.typeFactory.constructCollectionType(List::class.java, TopicInfoDTO::class.java)
    }
}

fun main() = runBlocking<Unit> {
    launch {
        val start = System.nanoTime()
        RedditHandlerImpl().getTopic("https://www.reddit.com/r/Kotlin/")
        RedditHandlerImpl().getComments("https://www.reddit.com/r/Kotlin/comments/zfgd16/shifting_from_flutter_to_kotlin/")
        val end = System.nanoTime()
        println(end - start)
    }
}
